/*
 * 연산자 : 피연산자 / 연산자
 * 			10 + 10 = 20
 * 			--	 --
 * 			피연산자 
 * 			  연산자
 * 	피연산자가 몇개? 
 * 	피연산자 1개 : 단항연산자
 * 	피연산자 2개 : 이상연산자
 * 	피연산자 3개 : 삼항연산자
 * ---------------------------
 * 	1. 단항연산자
 * 		= 증감연산자 : 1증가 , 1감소
 * 			++,-- : 반복문, 데이터베이스(데이터 읽기), 자동 증가번호(시퀀스)
 * 			=> 전치연산자 (증가후에 다른 연산 수행) ++a, --a
 * 				int a=10;
 * 				int b = ++a;
 * 					---	--
 * 						 1
 * 					 2
 * 					=> 결과값 : a=11,b=11
 * 
 * 			=> 후치연산자 (다른 연산 수행후 증가) a++, a--
 * 				int a=10;
 * 				int b = a++
 * 					-------
 * 					  1
 * 						---
 * 						 2
 * 					 => 결과값 : a=11,b=10
 * 				++ 자체 = 1증가한다
 * 
 * 				=> 1증가하는 연산자
 * 					a++,++a,a+=1,a=a+1
 * 				----------------------- 동일한 연산이다
 * 	= 부정연산자 (!) => 사용이 가능한 데이터형(논리 => true / false)
 * 		!true => false, !false=true
 * 	= 형변환 연산자 (type)
 * 		=> 큰 데이터형으로 변경
 * 			(double)10 => 10.0
 * 			(int)'A' => 65
 * 		=> 작은 데이터형으로 변경
 * 			(char)65 => 'A'
 * 			(int)10.5 => 소수점이하 전체 제거
 * 		=> 클래스 형변환
 * 		   ----- 데이터형 크기 (상속,포함)
 * =========================================
 * 	= 이항연산자 
 * 		=> 산술연산자 (+, - , * , / , %)
 * 			/ = 정수/정수 =정수
 * 				10/3 = 3 , 5/2 = 2
 * 				10/0 => 오류발생 (0으로 나눌수 없다)
 *  		% = 나머지는 부호가 왼쪽부호와 동일하다
 *  			+ % + => +
 *  			+ % - => +
 *         		- % + => -
 *         		- % - => -
 *         		
 *         		-5 % -2 => -1
 *         		-5 / -2 => 2
 *         		-5 * -2 => 10
 *          + =  산술연산자(덧셈) , 문자열 결합
 *          형변환
 *            = 기본 (큰데이터형으로 변경) => 가장 큰 데이터형 값을 출력
 *            	int + long
 *            	---
 *            	long
 *            	---------- long + long = long
 *            	int + double
 *            	---
 *            	double
 *            	------------double + double = double
 *            
 *            	***int 이하는 연산처리시 결과값 int
 *           	byte + byte = int
 *           	char + char = int
 *           	byte + char = int
 *             
 * 		=> 비교연산자 : == , != , < , > , <= , >=
 * 					  실수 , 정수 , 문자
 *  				 문자열은 비교할 수 없다 (equals)
 *  				
 * 		=> 논리연산자 : &&(직렬) , ||(병렬()
 * 					=> 두개의 조건이 true 일때만 true (&&)
 * 						=>기간, 범위가 표함된 경우
 * 					=> 두개중 한개이상이 true => true(||)
 * 						=>미포함
 * 					=>효율적인 연산
 * 						false && (조건) (연산처리가 안된다)
 * 						true || (조건) (연산처리가 안된다)
 * 		
 * 
 * 					(조건) && (조건)
 * 					----	 -----
 * 					  |			|
 * 					 ------------
 * 							|
 * 		=================결과값 true/false => if, while, for	
 * 		=> 대입연산자 : 결과값을 주입
 * 					= , op-(+=,-=,*=,/=,|=...)
 * 						----------
 * 							주로 반복문에서 사용
 * 							=> 항상 (1씩 증가되는 것이 아니다)
 * 								a+=2 , a-=2...
 * 								----
 * 								int a=10;		
 * 								a+=2 ==> a=10+2
 * 								a=a+2
 * 								  -10 => a=12;
 * 								a+=5; a=a+5 => a=15
 * 								   -- 5를 증가
 * 								=> 복합 대입연산자
 * 	= 삼항연산자 : if ~else 대신사용
				=> 웹, 게임 (소스가 많은 경우)
				
	  예)
	  	if(curpage>1)
	  	 <a href="list.jsp?page=${curpage-1}"</a>
	  	else
	  	 <a href="list.jsp?page=${curpage}">이전</a>
	  	 
	  	<a href="list.jsp?page=${curpage>1?curpage-1:curpage}">이전 
 * 
 * 	교재)
 * 			자바 , 오라클 
 * 			-----------
 * 			1.87page => 연산자의 종류
 * 			2.89page => 연산자 우선순위
 * 				+,-,<,*,/,%
 * 				"Hello" + 10 == Hello10
 * 				"Hello"+ 10+10  => Hello1010
 * 				"Hello" + "10*10 => Hello100	
 * 						   -------
 * 							 1
 * 				-----------
 * 					2 
 * 				"Hello" + (10-10) =>  오류
 * 			3.91page 연산자 우선순위
 * 			  단항연산자 > 산술연산자 > 비교연산자 > 논리연산자 > 대입연산자
 * 						   *,/,% > +,- |
 * 									   |
 * 									 <,>,<=,>=
 * 									    == , !=
 *		 	=> ()를 이용해서 우선순위 체크
 *			4. 93page : 형변환
 *			5. 94page => ++,--
 *			6. 109page 
 *			7. 114page(118page)
 *					121~130page 생략
 *			8.
 *			9. 
 */
public class 연산자정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
